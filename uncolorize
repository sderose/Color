#!/usr/bin/env python
#
# uncolorize
#
# 2015-08-31: Written by Steven J. DeRose.
#
# To do:
#
from __future__ import print_function
import sys
import os
import re
import argparse
#import string
#import math
#import subprocess
import codecs, locale

from sjdUtils import sjdUtils
from alogging import ALogger
from MarkupHelpFormatter import MarkupHelpFormatter

__version__ = "2015-09-17"


###############################################################################
# Process options
#
parser = argparse.ArgumentParser(
    description="""

=pod

=head1 Usage

uncolorize [options]


=head1 Options

=over

=item * B<--iencoding> I<e>

Assume this character set for input files.

=item * B<-v> OR B<--verbose>

Add more detailed messages (repeatable).

=item * B<--version>

Display version info and exit.

=back


=head Related Commands


=head1 Known bugs and limitations

C<hilite> can apply color(s) to matched lines or expressions.

C<colorstring> provide information about ANSI terminal escape sequences for color,
and can set up C<lscolors> for bash.


=head1 Ownership

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

The author's present email is sderose at acm.org.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=head1 Options

=cut
    """,
    formatter_class=MarkupHelpFormatter
)
parser.add_argument(
    "--iencoding",        type=str, metavar='E', default="utf-8",
    help='Assume this character set for input files.')
parser.add_argument(
    "--unicode",          action='store_const',  dest='iencoding',
    const='utf8', help='Assume utf-8 for input files.')
parser.add_argument(
    "--verbose", "-v",    action='count',       default=0,
    help='Add more messages (repeatable).')
parser.add_argument(
    '--version',          action='version',     version='Version of '+__version__,
    help='Display version information, then exit.')

parser.add_argument(
    'files',             type=str,
    nargs=argparse.REMAINDER,
    help='Path(s) to input file(s)')

global args, su
#lg = ALogger()
args = parser.parse_args()
su = sjdUtils()
su.setVerbose(args.verbose)


###############################################################################
###############################################################################
#
def doOneFile(fh):
    rec = ""
    recnum = 0
    while (1):
        rec = fh.readline()
        if (len(rec) == 0): break
        recnum += 1
        print(su.uncolorize(rec), end='')
    return(recnum)



###############################################################################
###############################################################################
# Main
#
if (len(args.files) == 0):
    fh = sys.stdin
else:
    for fnum in (range(len(args.files))):
        f = args.files[fnum]
        if (os.path.isfile(f)):
            fh = codecs.open(f, mode="r", encoding=args.iencoding)
            doOneFile(fh)
            fh.close()
        else:
            lg.vMsg(0,"Can't find file '" + f + "'.")

sys.exit(0)
