#!/usr/bin/env python
#
# uncolorize: Remove ANSI terminal color escape sequences.
# 2015-08-31; Written by Steven J. DeRose.
#
from __future__ import print_function
import sys
import os
import argparse
import codecs

from sjdUtils import sjdUtils
from MarkupHelpFormatter import MarkupHelpFormatter

__metadata__ = {
    'title'        : "uncolorize",
    'rightsHolder' : "Steven J. DeRose",
    'creator'      : "http://viaf.org/viaf/50334488",
    'type'         : "http://purl.org/dc/dcmitype/Software",
    'language'     : "Python 3.7",
    'created'      : "2015-08-31",
    'modified'     : "2020-01-15",
    'publisher'    : "http://github.com/sderose",
    'license'      : "https://creativecommons.org/licenses/by-sa/3.0/"
}
__version__ = __metadata__['modified']

descr = """
=Usage=

uncolorize [options]

Remove ANSI terminal color escape codes from the input.

For information on these codes, see for example
[https://en.wikipedia.org/wiki/ANSI_escape_code].

=Options=

* B<--iencoding> I<e>
Assume this character set for input files.

* B<-v> OR B<--verbose>
Add more detailed messages (repeatable).

* B<--version>
Display version info and exit.

=head Related Commands

`sjdUtils.py`, `ColorManager.pt`, and `sjdUtils.pm` also
provide the `uncolorize` function.

=Known bugs and limitations=

C<hilite> can apply color(s) to matched lines or expressions.

C<colorstring> provide information about ANSI terminal escape sequences for color,
and can set up C<lscolors> for bash.

=To do=

Generalize definition (at least at option) to remove all ANSI terminal escapes.

The common case (including the color escapes) is a complete "code",
namely the "Control Sequence Introducer":

    ESC [ [0–9:;<=>?]* [- !"#$%&'()*+,./]* [@A–Z[\]^_`a–z{|}~]
           x30-x3f      x20-x2f            x40–x7E
           parameter    intermediate       final

However, in practice the parameter group is almost always
a list of semicolor-separated numbers.

Sequences containing the parameter bytes [<=>?] or the final bytes x70–x7E [p–z{|}~] are private.

=History=

* 2015-08-31 Written by Steven J. DeRose.
* 2015-09-17
* 2020-03-04: Layout, POD to MarkDown, lint.

=Rights=

This work by Steven J. DeRose is licensed under a Creative Commons
Attribution-Share Alike 3.0 Unported License. For further information on
this license, see L<http://creativecommons.org/licenses/by-sa/3.0/>.

The author's present email is sderose at acm.org.

For the most recent version, see L<http://www.derose.net/steve/utilities/>.

=Options=
"""

###############################################################################
# Process options
#
parser = argparse.ArgumentParser(
    description=descr, formatter_class=MarkupHelpFormatter)
parser.add_argument(
    "--iencoding",        type=str, metavar='E', default="utf-8",
    help='Assume this character set for input files.')
parser.add_argument(
    "--unicode",          action='store_const',  dest='iencoding',
    const='utf8', help='Assume utf-8 for input files.')
parser.add_argument(
    "--verbose", "-v",    action='count',       default=0,
    help='Add more messages (repeatable).')
parser.add_argument(
    '--version',          action='version',     version='Version of '+__version__,
    help='Display version information, then exit.')

parser.add_argument(
    'files',             type=str,
    nargs=argparse.REMAINDER,
    help='Path(s) to input file(s)')

args = parser.parse_args()

su = sjdUtils()
su.setVerbose(args.verbose)


###############################################################################
#
def doOneFile(fh):
    rec = ""
    recnum = 0
    while (1):
        rec = fh.readline()
        if (len(rec) == 0): break
        recnum += 1
        print(su.uncolorize(rec), end='')
    return(recnum)


###############################################################################
###############################################################################
# Main
#
if (len(args.files) == 0):
    fh0 = sys.stdin
else:
    for fnum in (range(len(args.files))):
        f = args.files[fnum]
        if (os.path.isfile(f)):
            fh0 = codecs.open(f, mode="r", encoding=args.iencoding)
            doOneFile(fh0)
            fh0.close()
        else:
            sys.stderr.write("Can't find file '%s'.\n" % (f))

sys.exit(0)
